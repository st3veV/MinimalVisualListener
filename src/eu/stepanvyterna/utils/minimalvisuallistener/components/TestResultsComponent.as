/**
 * Created by Steve on 7.3.2015.
 */
package eu.stepanvyterna.utils.minimalvisuallistener.components
{
	import com.bit101.components.Accordion;
	import com.bit101.components.Label;
	import com.bit101.components.List;
	import com.bit101.components.Panel;
	import com.bit101.components.ScrollPane;
	import com.bit101.components.Style;
	import com.bit101.components.Window;

	import eu.stepanvyterna.utils.minimalvisuallistener.data.TestElement;

	import eu.stepanvyterna.utils.minimalvisuallistener.data.TestSuiteElement;
	import eu.stepanvyterna.utils.minimalvisuallistener.data.TestSuiteElementStats;

	import flash.display.DisplayObject;
	import flash.text.TextField;
	import flash.text.TextFormat;

	public class TestResultsComponent
	{

		private static const LABEL_NAME:String = "label";
		private static const STATS_NAME:String = "stats";
		private static const SCROLLBAR_WIDTH:Number = 10;
		private static const SCROLLBAR_HEIGHT:Number = 10;
		private static const WINDOW_HEADER_HEIGHT:Number = 20;
		private static const HEADER_STATS_RIGHT_OFFSET:Number = 5;

		private var passTextFormat:TextFormat = new TextFormat( Style.fontName, Style.fontSize, 0x009f00, true );   //Green text
		private var ignoreTextFormat:TextFormat = new TextFormat( Style.fontName, Style.fontSize, 0xff7f00, true ); //Orange text
		private var failTextFormat:TextFormat = new TextFormat( Style.fontName, Style.fontSize, 0xff0000, true );   //Red text

		private var _scroller:ScrollPane;
		private var tests:Accordion;
		private var _testSuites:Vector.<TestSuiteElement>;
		private var _width:Number;
		private var _height:Number;

		public function TestResultsComponent( width:Number, height:Number )
		{
			_width = width;
			_height = height;
			init();
		}

		private function init():void
		{
			_scroller = new ScrollPane();
			_scroller.setSize( _width, _height );
			tests = new Accordion( _scroller );
			tests.setSize( _width - SCROLLBAR_WIDTH, _height - SCROLLBAR_HEIGHT );
		}

		public function initialize( testSuites:Vector.<TestSuiteElement> ):void
		{
			_testSuites = testSuites;

			var i:int;
			var win:Window;
			for ( i = 0; i < 2; i++ ) // replacing existing windows generated by Accordion
			{
				win = tests.getWindowAt( i );
				win.title = _testSuites[ i ].name;
				adjustHeader( win.titleBar );
				generateTestContent( _testSuites[ i ], win );
			}
			for ( ; i < _testSuites.length; i++ )
			{
				tests.addWindow( _testSuites[ i ].name );
				win = tests.getWindowAt( i );
				adjustHeader( win.titleBar );
				generateTestContent( _testSuites[ i ], win );
			}
			tests.height = Math.max( _height - SCROLLBAR_HEIGHT, i * WINDOW_HEADER_HEIGHT );
			for ( var j:int = 0; j < lists.length; j++ )
			{
				var list:List = lists[ j ];
				list.height = tests.height - i * WINDOW_HEADER_HEIGHT;
				list.width = tests.width;
			}
		}

		private var lists:Vector.<List> = new Vector.<List>();

		private function generateTestContent( testSuiteElement:TestSuiteElement, window:Window ):void
		{
			var items:Array = [];
			for ( var i:int = 0; i < testSuiteElement.testElements.length; i++ )
			{
				var testElement:TestElement = testSuiteElement.testElements[ i ];
				items.push( testElement.readableName );
			}
			lists.push( new List( window, 0, 0, items ) );
		}

		public function update():void
		{
			var stats:TestSuiteElementStats;
			var win:Window;
			var suiteElement:TestSuiteElement;
			for ( var i:int = 0; i < _testSuites.length; i++ )
			{
				suiteElement = _testSuites[ i ];
				if ( suiteElement.dirty )
				{
					win = tests.getWindowAt( i );
					stats = suiteElement.getStats();
					adjustHeader( win.titleBar, stats );
				}
			}
		}

		private function adjustHeader( header:Panel, stats:TestSuiteElementStats = null ):void
		{
			var statsLabel:Label;
			var label:Label;
			if ( (label = header.content.getChildByName( LABEL_NAME ) as Label) != null )
			{
				statsLabel = header.content.getChildByName( STATS_NAME ) as Label;
			}
			else
			{
				var i:int = 0;
				while ( label == null )
				{
					label = header.content.getChildAt( i++ ) as Label;
				}
				label.name = LABEL_NAME;
				statsLabel = new Label( header, 0, 1, "0:0:0/0" );
				statsLabel.name = STATS_NAME;
				statsLabel.textField.x = header.width - statsLabel.textField.width - HEADER_STATS_RIGHT_OFFSET;
			}
			if ( !stats )
			{
				return;
			}
			var txt:TextField = statsLabel.textField;
			statsLabel.text = stats.toString();

			var fromIndex:int = 0;
			var toIndex:int = txt.text.indexOf( ":", fromIndex );
			txt.setTextFormat( passTextFormat, fromIndex, toIndex );
			fromIndex = toIndex + 1;
			toIndex = txt.text.indexOf( ":", fromIndex );
			txt.setTextFormat( ignoreTextFormat, fromIndex, toIndex );
			fromIndex = toIndex + 1;
			toIndex = txt.text.indexOf( "/", fromIndex );
			txt.setTextFormat( failTextFormat, fromIndex, toIndex );

			txt.x = header.width - txt.width - HEADER_STATS_RIGHT_OFFSET;
		}

		public function get display():DisplayObject
		{
			return _scroller;
		}
	}
}
